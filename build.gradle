plugins {
    // See https://fabricmc.net/wiki/documentation:fabric_loom
	id 'fabric-loom' version '0.8-SNAPSHOT'

	id 'maven-publish'
}

repositories {
	maven {
        // For ClientCommands mod.
        // See https://github.com/CottonMC/ClientCommands
		name = 'CottonMC'
		url = 'http://server.bbkr.space:8081/artifactory/libs-snapshot'
	}    
}


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// See https://github.com/CottonMC/ClientCommands
	// "include" does jar-in-jar for the ClientCommands mod, so that mod
	// will be included in our JAR file.
	modCompile "io.github.cottonmc:cotton-client-commands:${project.cmd_version}"
	include "io.github.cottonmc:cotton-client-commands:${project.cmd_version}"
}

processResources {
	inputs.property "version", project.version

	// Fixes Gradle 8.0 deprecation warnings.
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default
// is this fixes some edge cases with special characters not displaying
// correctly see
// http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to
// the "build" task if it is present.
//
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
